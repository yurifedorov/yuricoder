{% extends "base.njk" %}

{# variables #}
{% set title           = 'расположение блоков' %}
{% set category        = 'docs' %}
{% set subcategory     = 'html' %}
{% set segment         = 'notes' %}
{% set subsegment_del  = 'delete' %}

{# путь к примерам code-example-beta [НЕ УДАЛЯТЬ] #}
{# set example_dir    = 'examples/javascript/operators/' #}
{# путь к изображениям данной страницы [НЕ УДАЛЯТЬ] #}
{% set images_dir     = '/img/docs/html/notes/blocks-placement' %}

{# ===================================== #}

{% block head %}
  <title>Расстановка блоков на веб-странице</title>
  <meta name="description" content="Оператор возвращает true, если операнды строго равны. В отличии от обычного оператора 'равно', он не не приводит операнды к одному типу. " />
{% endblock %}

{% block aside_top %}{% include aside_top %}{% endblock %}
{% block aside_left %}{% include aside_left %}{% endblock %}

{% block main %}
  <h1>Как я думал над расположением блоков на странице</h1>
  <p>Мне не понравилось что на странице слишком много пустого простанства справа и очень убого выглядит навигация по разделам (я понял, что "плитка" тут не подходит).</p>
  <img src="{{images_dir}}/before.png" alt="пустое пространство на странице">
  <p>Прикинул, что наверное будет лучше разделить блок 'main' на две части. Слева разположить список, справа подгружать контент с другой страницы.</p>
  <img src="{{images_dir}}/draft.jpg" alt="пустое пространство на странице">
  <h2>Тут возникла проблемка</h2>
  <p>Я пользуюсь шаблонизатором Nunjucks и решил, что тег 'main' указываю только базовом шаблоне 'base.njk'</p>
  
  <h4>base.njk</h4>
  <pre>
    &lt;main data-observe-resizes&gt;
      { % block main % } {# контент #} { % endblock % }
    &lt;/main&gt;
  </pre>
  <h4>дочерний шаблон</h4>
    <pre>
    { % block main % }

      &lt;h1&gt;заголовок&lt;/h1&gt;
      тут много контента...
      текст, картинки, премеры и тд.
      тут много контента...

    { % endblock % }
  </pre>

  <h3>Почему я вынес тег &lt;main&gt; в базовый шаблон?</h3>
  <p>Мне надо было добавить атрибут 'data-observe-resizes' и я запарился открывать каждый html-документ.</p>
  <p>Так что идея вернуть обратно &lt;main&gt; в дочерний шаблон и повесить на него класс 'two_columns' отпадает.</p>

  <h3>Может указать класс в 'base.njk' ?</h3>
  <p>*И по-тихоньку начать захламлять базовый шаблон*</p>
  <h4>base.njk</h4>
  <pre>
    &lt;main data-observe-resizes <b>class='two_columns'</b>&gt;
      { % block main % } {# контент #} { % endblock % }
    &lt;/main&gt;
  </pre>
  <p>Тоже как-то не очень. Хочется 'базу' сохранить чистой и ясной.</p>
  <p>Тем более что на каких-то страницах &lt;main&gt; в одну колонку, где-то в две, где-то может быть и в три.</p>

  <h3>Добавить дополнительный блок контейнер?</h3>
  <h4>дочерний шаблон</h4>
    <pre>
    { % block main % }

      <b>&lt;div class='two_columns'&gt;</b>
        &lt;h1&gt;заголовок&lt;/h1&gt;
        тут много контента...
        текст, картинки, премеры и тд.
        тут много контента...
      <b>&lt;/div&gt;</b>

    { % endblock % }
  </pre>
  <p>Идея хорошая, но если сайт из 1-2х страниц. Если в проекте таких 'двухколоночных' страниц много это решение не годится.</p>
  <p>Если мне понадобится сделать какое-то глобальное изменение со всем этими контейнерами - то будет беда, как с атрибутом 'data-observe-resizes' о котором я писал ранее.</p>

  <h3>Прибегнуть к JS?</h3>
  <p>С помощью JS можно просто добавить нужный класс к &lt;main&gt;</p>
    <pre>
    &lt;script&gt;
      let main = document.getElementsByTagName('main');
      main[0].classList.add("two_columns");
    &lt;/script&gt;
  </pre>
  <p>Сначала выбрал все теги &lt;main&gt; с помощью <b>getElementsByTagName</b> (хотя по факту он всего один) и сохранил в переменной 'main'</b></p>
  <p>Затем методом <b>classList.add</b> добавил класс 'two_columns'.</p>
  <p>У меня сначала приведенный ниже код не работал:</p>
  <pre>
    &lt;script&gt;
      let main = document.getElementsByTagName('main');
      main.classList.add("two_columns");
    &lt;/script&gt;
  </pre>
  <b>Нужно было всего-лишь указать номер элемента. У меня он первый и единственный, поэтому [0].</b>
  <pre>
    &lt;script&gt;
      let main = document.getElementsByTagName('main');
      main<b>[0]</b>.classList.add("two_columns");
    &lt;/script&gt;
  </pre>
  <p>Я конечно не хотел использовать JS потому что:</p>
  <ul>
    <li>любой скрипт увеличивает время загрузки страницы (хотя смотря какой скрипт)</li>
    <li>класс не добавится если у пользователя отключен JS в браузере (он включен по умолчанию, так что думаю не страшно)</li>
  </ul>

  <p>ИТОГ: ничего лучше JS я придумать не смог и остановился на последнем варианте.</p>
{% endblock %}

{% block inlineScripts %}
  {# инлайновые скрипты для этой страницы #}
  <script>
    let main = document.getElementsByTagName('main');
    main[0].classList.add("two_columns");
  </script>
{% endblock %}