{% extends "base.njk" %}

{# variables #}
{% set title           = 'simplest-filter' %}
{% set category        = 'docs' %}
{% set subcategory     = 'javascript' %}
{% set segment         = 'apps' %}
{% set subsegment      = 'filters' %}

{# путь к примерам code-example-beta [НЕ УДАЛЯТЬ] #}
{% set example_dir    = 'examples/javascript/apps/filters/' %}

{# ===================================== #}

{% block head %}
  <title>Простейший фильтр на JavaScript</title>
  <meta name="description" content="List of all javascript operators with usage examples." />
  <link rel="stylesheet" href="{{prism_css}}">
  <script src="{{prism_js}}" async></script>
{% endblock %}

{% block aside_top %}{% include aside_top %}{% endblock %}
{% block aside_left %}{% include aside_left %}{% endblock %}

{% block main %}

  <h1>Простейший фильтр на JavaScript</h1>
  <p>Задача следующая: разобраться как работает пройстейший фильтр, написанный на чистом JS.</p>
  <p>Нашел на <a href="https://habr.com/ru/post/342922/">хабре</a> полезную статью, где описывается процесс создания и представлен рабочий пример:</p>
  
  {% set example_id = 'simplest_filter' %}
  {% set numeration = true %}
  {% set split      = false %}
  {% set html       = true %}
  {% set njk        = false %}
  {% set css        = false %}
  {% set js         = true %}
  {% set demo       = 'simplest_filter-demo.njk' %}
  {% include codeExample %}


  <h2>Подробный разбор JS кода</h2>
  <p>Радует тот факт, что результаты генерируются в JS коде (функция <b>renderList</b>), от этого HTML максимально короткий (только <b>input</b> и пустой блок списка).</p>

  <p>Вот эта функция:</p>
  {% set example_id = 'simplest_filter_render_function' %}
  {% set numeration = true %}
  {% set split      = false %}
  {% set html       = false %}
  {% set njk        = false %}
  {% set css        = false %}
  {% set js         = true %}
  {% set demo       = false %}
  {% include codeExample %}

  <table>
    <tr>
      <td>строка</td>
      <td>описание</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Функция принимает два аргумента: массив <b>_list</b> с элементами и элемент DOM-дерева, в который нужно нарисовать список (если первый аргумент не задан, то мы говорим функции, что это пустой массив).</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Рахобраться что за <b>el.innerHTML='';</b> ??????</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Метод <b>forEach()</b> выполняет указанную функцию один раз для каждого элемента в массиве. <small><a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">подробнее на MDN</a></small></td>
    </tr>
    <tr>
      <td>4</td>
      <td>Директива <b>let</b> объявляет переменную с областью видимости, ограниченной текущим блоком кода (в данном примере создаем переменную с именем <b>new_el</b>). <small><a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Statements/let">подробнее на MDN</a></small> <br>Затем создаем DOM-узел <b>document.createElement('li')</b> и присваиваиваем переменной <b>new_el</b>.</td>
    </tr>
    <tr>
      <td>5</td>
      <td>добавляем внутрь этого узла сам элемент</td>
    </tr>
    <tr>
      <td>6</td>
      <td>добавляем его в конец нашего родительского элемента</td>
    </tr>
    <tr>
      <td>7</td>
      <td>-</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Метод <b>console.timeEnd()</b> - отобразит в консоли время (в миллисекундах), прошедшее с момента запуска таймера (<b>'test'</b> - это текстовая метка, отображаемая в консоли). <small><a href="https://developer.mozilla.org/ru/docs/Web/API/Console/time">подробнее на MDN</a></small></td>
    </tr>
    <tr>
      <td>9</td>
      <td>-</td>
    </tr>
    <tr>
  </table>

  <q>Нижнее подчеркивание перед именем массива <b>_list=[ ]</b> это просто общепринятое соглашение об именовании <small>(узнал тут <a href="http://www.codeharmony.ru/materials/69">9 сбивающих с толку соглашений об именовании</a>)</small></q>

{% endblock %}